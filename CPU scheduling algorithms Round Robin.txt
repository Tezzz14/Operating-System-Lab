//Round Robin

#include <stdio.h>
#define MAX_PROCESSES 10
struct Process{
int id;
int burst_time;
int remaining_time;
int arrival_time;
int waiting_time;
int turnaround_time;
};
void roundRobin(struct Process processes[], int n, int quantum)
{
int remaining_burst[MAX_PROCESSES];
int time = 0;
int completed = 0;
for (int i = 0; i < n; i++)
{
remaining_burst[i] = processes[i].burst_time;
}
while (completed != n)
{
for (int i = 0; i < n; i++)
{
   if (remaining_burst[i] > 0)
   {
       if (remaining_burst[i] > quantum)
       {
           time += quantum;
           remaining_burst[i] -= quantum;
       }
       else
       {
           time += remaining_burst[i];
           processes[i].turnaround_time = time - processes[i].arrival_time;
           processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
           remaining_burst[i] = 0;
           completed++;
       }
   }
}
 }
 printf("Process ID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
 for (int i = 0; i < n; i++)
 {
printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
 }
 float avg_waiting_time = 0, avg_turnaround_time = 0;
 for (int i = 0; i < n; i++)
 {
avg_waiting_time += processes[i].waiting_time;
avg_turnaround_time += processes[i].turnaround_time;
 }
 avg_waiting_time /= n;
 avg_turnaround_time /= n;
 printf("\nAverage Waiting Time: %.2f\n", avg_waiting_time);
 printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
}
int main(){
int n, quantum;
printf("Enter the number of processes: ");
scanf("%d", &n);
printf("Enter the time quantum: ");
scanf("%d", &quantum);
struct Process processes[MAX_PROCESSES];
for (int i = 0; i < n; i++){
processes[i].id = i + 1;
printf("Enter Arrival Time for Process %d: ", i + 1);
scanf("%d", &processes[i].arrival_time);
printf("Enter Burst Time for Process %d: ", i + 1);
scanf("%d", &processes[i].burst_time);
processes[i].remaining_time = processes[i].burst_time;
}
roundRobin(processes, n, quantum);
return 0;
}
